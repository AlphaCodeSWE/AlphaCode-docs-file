name: Build Typst Documentation

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'documents/**/*.pdf'

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Pull latest changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      - name: Set up Rust and Install Typst CLI
        uses: dtolnay/rust-toolchain@stable

      - name: Install Typst CLI
        run: |
          cargo install --locked typst-cli
          typst --version

      - name: Compile Typst files to PDF recursively
        run: |
          find sources -type f -name "*.typ" | while read -r file; do
            relpath=$(echo "$file" | sed 's|^sources/||; s|\.typ$|.pdf|')
            output="documents/$relpath"
            mkdir -p "$(dirname "$output")"
            if [ -f "${output%.pdf}_signed.pdf" ]; then
              echo "Skipping $file, PDF già firmato."
              continue
            fi
            echo "Compiling $file to $output..."
            typst compile --root . "$file" "$output"
          done

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Initialize package.json and install dependencies
        run: |
          echo '{ "name": "node-signpdf-workflow", "version": "1.0.0" }' > package.json
          npm install jsignpdf node-forge pdf-lib node-signpdf

      - name: Upload logo for visible signature
        run: |
          cp template/assets/AlphaCodeLogo.png logo.png

      # ———> NUOVO: installazione di Java (necessario per jsignpdf)
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Create and verify certificate.p12 from secret
        run: |
          # decodifica senza newline/spazi
          printf '%s' "${{ secrets.SIGN_CERT }}" \
            | tr -d '\r\n ' \
            | base64 --decode > certificate.p12

          # verifica con OpenSSL
          openssl pkcs12 -info \
            -in certificate.p12 \
            -passin pass:"${{ secrets.SIGN_CERT_PASSWORD }}" \
            -nokeys -chain >/dev/null \
            && echo "✔ certificate.p12 OK" \
            || { echo "❌ certificate.p12 non valido o password errata"; exit 1; }

      - name: Run sign.js script
        env:
          SIGN_CERT_PASSWORD: ${{ secrets.SIGN_CERT_PASSWORD }}
        run: node sign.js

      - name: Verify PDFs
        run: |
          echo "DEBUG: File .typ trovati in 'sources':"
          find sources -type f -name "*.typ" || echo "Nessun file .typ trovato."
          echo "DEBUG: File .pdf trovati in 'documents':"
          find documents -type f -name "*.pdf" || echo "Nessun file .pdf trovato."
          echo "DEBUG: File PDF firmati trovati in 'documents':"
          find documents -type f -name "*_signed.pdf" || echo "Nessun PDF firmato trovato."

      - name: Commit and push signed PDFs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add documents/
          if git diff --cached --quiet; then
            echo "DEBUG: No changes to commit"
            exit 0
          fi
          git commit -m "Aggiorna PDF con firma digitale"
          git push origin HEAD:main
