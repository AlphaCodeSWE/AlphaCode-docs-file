name: Build Typst Documentation

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'documents/**/*.pdf'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-sign-archive:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout e Pull rebase iniziale
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Pull latest changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 2) Installazione Typst (tramite Rust)
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Typst CLI
        run: |
          cargo install --locked typst-cli
          typst --version

      # 3) Compila i file .typ in PDF
      - name: Compile Typst files
        run: |
          find sources -type f -name "*.typ" | while read -r file; do
            relpath=$(echo "$file" | sed 's|^sources/||; s|\.typ$|.pdf|')
            output="documents/$relpath"
            mkdir -p "$(dirname "$output")"
            if [ -f "${output%.pdf}_signed.pdf" ]; then
              echo "Skipping $file, PDF giÃ  firmato."
              continue
            fi
            echo "Compiling $file to $output..."
            typst compile --root . "$file" "$output"
          done

      # 4) Setup Node.js per la firma
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install sign dependencies
        run: |
          echo '{ "name": "node-signpdf-workflow", "version": "1.0.0" }' > package.json
          npm install jsignpdf node-forge pdf-lib node-signpdf

      - name: Upload logo for visible signature
        run: cp template/assets/AlphaCodeLogo.png logo.png

      - name: Create certificate.p12 from secret
        run: echo "${{ secrets.SIGN_CERT }}" | base64 -d > certificate.p12

      # 5) Firma i PDF
      - name: Run sign.js script
        env:
          SIGN_CERT_PASSWORD: ${{ secrets.SIGN_CERT_PASSWORD }}
        run: node sign.js

      - name: Verify signed PDFs exist
        run: |
          SIGNED_FILES=$(find documents -type f -name "*_signed.pdf")
          if [ -z "$SIGNED_FILES" ]; then
            echo "ERROR: Nessun PDF firmato trovato!"
            exit 1
          else
            echo "DEBUG: PDF firmati trovati:"
            echo "$SIGNED_FILES"
          fi

      # 6) Genera sign_report.yml con i PDF firmati
      - name: Generate sign report
        run: |
          echo "signed_files:" > sign_report.yml
          SIGNED_FILES=$(find documents -type f -name "*_signed.pdf")
          for pdf in $SIGNED_FILES; do
            echo "- $pdf" >> sign_report.yml
          done
          echo "DEBUG: Creato sign_report.yml:"
          cat sign_report.yml

      # 7) Esecuzione del bot Python, passandogli sign_report.yml
      #
      # Il tuo bot deve generare un file final_report.yml con i risultati
      # (es. spostamenti, eliminazioni, versioni minori, ecc.).
      - name: Run archiving bot
        run: |
          echo "Eseguo bot (process_files.py) con report sign_report.yml..."
          python process_files.py sign_report.yml
          echo "Bot completato."

      # 8) Commit locale, pull --rebase, commit e push finale
      - name: Commit, rebase e push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # A) Commit delle modifiche locali (PDF firmati + archivio)
          git add documents/ *.yml
          if git diff --cached --quiet; then
            echo "DEBUG: No local changes to commit"
          else
            git commit -m "Firma e archivia PDF (pre-rebase)"
          fi

          # B) Pull con rebase
          git pull --rebase origin main

          # C) Commit e push finale (se ci sono altri cambi)
          git add documents/ *.yml
          if git diff --cached --quiet; then
            echo "DEBUG: No changes after rebase"
            exit 0
          fi
          git commit -m "Firma e archivia PDF (post-rebase)"
          git push origin HEAD:main

      # 9) (Opzionale) Elenca i contenuti archiviati
      - name: List documents/archive
        run: ls -R documents/archive || true

      # 10) (Opzionale) Carica final_report.yml come artifact
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: final-report
          path: final_report.yml
          if-no-files-found: ignore
