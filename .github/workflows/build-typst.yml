name: Build and Sign Typst Documentation

on:
  push:
    branches:
      - main
    # Ignoriamo i PDF per evitare loop continui quando facciamo push dei PDF stessi
    paths-ignore:
      - 'documents/**/*.pdf'

permissions:
  contents: write

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Pull per sincronizzare con main (evitiamo conflitti)
      - name: Pull latest changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 3. Installa la toolchain Rust (necessaria per Typst)
      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 4. Installa Typst CLI
      - name: Install Typst CLI
        run: |
          cargo install --locked typst-cli
          typst --version

      # 5. Compila i file .typ in PDF
      - name: Compile all Typst files to PDF
        run: |
          find sources -type f -name "*.typ" | while read -r file; do
            output="documents/$(echo "$file" | sed 's|^sources/||; s|\.typ$|.pdf|')"
            mkdir -p "$(dirname "$output")"
            typst compile "$file" "$output"
          done

      # 6. Commit e push dei PDF NON firmati
      - name: Commit and push unsigned PDFs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add documents/
          if git diff --cached --quiet; then
            echo "Nessuna modifica da commitare (PDF invariati)"
          else
            git commit -m "Aggiungi PDF non firmati"
            git push origin HEAD:main
          fi

      # 7. Pull di nuovo per avere lo stato aggiornato (compreso il commit appena fatto)
      - name: Pull again
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      # 8. Installa Java (richiesto da jSignPdf)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # 9. Scarica e scompatta jSignPdf 2.3.0 (con tutte le librerie)
      - name: Download jSignPdf 2.3.0
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          wget -q "https://sourceforge.net/projects/jsignpdf/files/stable/JSignPdf-2.3.0/jsignpdf-2.3.0.zip/download" -O jsignpdf-2.3.0.zip
          unzip jsignpdf-2.3.0.zip -d jsignpdf-2.3.0

      # 10. Decodifica il certificato dal secret (PKCS#12 in Base64)
      - name: Decode and set up signing certificate
        run: |
          echo "${{ secrets.SIGN_CERT }}" | base64 -d > cert.p12

      # 11. Firma i PDF e rimuove quelli non firmati
      - name: Digitally sign and remove unsigned PDFs
        env:
          SIGN_CERT_PASSWORD: ${{ secrets.SIGN_CERT_PASSWORD }}
          JAVA_TOOL_OPTIONS: "--add-opens=java.base/sun.security.pkcs12=ALL-UNNAMED"
        run: |
          find documents -type f -name "*.pdf" | while read -r pdf; do
            filename=$(basename "$pdf")

            # Se è già firmato, salta
            if [[ "$filename" == *_signed.pdf ]]; then
              continue
            fi

            echo "Firmo $filename..."

            pushd jsignpdf-2.3.0 > /dev/null
            java -cp "JSignPdf.jar:lib/*" net.sf.jsignpdf.JSignPdf \
              -q \
              -kst PKCS12 \
              -ksf ../cert.p12 \
              -ksp "$SIGN_CERT_PASSWORD" \
              -ts http://timestamp.digicert.com \
              -os _signed \
              ../"$pdf"
            popd > /dev/null

            # Verifica se è stato creato il PDF firmato
            signed_pdf="${pdf%.pdf}_signed.pdf"
            if [ -f "$signed_pdf" ]; then
              echo "PDF firmato creato: $signed_pdf"
              # Rimuove l'originale
              rm "$pdf"
            else
              echo "Errore nella firma di $pdf"
              exit 1
            fi
          done

      # 12. Commit e push dei PDF firmati (rimuovendo quelli non firmati)
      - name: Commit and push signed PDFs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add documents/
          if git diff --cached --quiet; then
            echo "Nessuna modifica da commitare (probabilmente nessun PDF da firmare)"
            exit 0
          fi
          git commit -m "Sostituisci PDF non firmati con PDF firmati"
          git push origin HEAD:main
